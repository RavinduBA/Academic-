For SQL quire writing look lab5,6,7 on co226 and lab1 on co527


SQL Queries

SELECT, DELETE ,INSERT , UPDATE


SELECT

" SELECT "      = works as a project operator  , writes firstly in the query after this we set FROM
" FROM "        = after this we write the tables name or the join of two tables
" INNER JOIN "  = we write two tables from left and right to this , after this we write the  condition for join operation (mostly we match the same ID attributes of two tables )
" WHERE "       = works as a select operator  , after the tables name we write this

- even 3 tables can combine with join operation but only 2 at a time also we can set many , where conditions using AND .
- order is like this SELECT , , FROM , table name or INNER JOIN,ON condition , WHERE ,
- normally in join operations when going to equaling two tables attributes we normally equal the same attributes of two tables (this can be primary key and foreign key or not)

EX: 
SELECT * from MOVIE 
WHERE Director = "James Cameron";

SELECT Movie_id, Title, Year, Director FROM MOVIE
WHERE Director = "Steven Spielberg";

SELECT DISTINCT Movie.Year
FROM MOVIE JOIN RATING
 ON MOVIE.Movie_ID = RATING.Movie_ID
WHERE RATING.Stars IN (4, 5)
ORDER BY Year;       // to make order


 Select each movie id with its corresponding title, reviewer id, reviewer name and stars 
received, where number of stars received is equal to five

SELECT MOVIE.Movie_ID, MOVIE.Title, REVIEWER.Reviewer_ID, REVIEWER.Reviewer_Name, RATING.Stars
FROM MOVIE INNER JOIN RATING 
ON MOVIE.Movie_ID = RATING.Movie_ID
INNER JOIN REVIEWER
ON RATING.Reviewer_ID =  REVIEWER.Reviewer_ID
WHERE RATING.Stars = 5;

23. Select movie titles with its reviewer name and stars received. Order the result by movie 
title in the alphabetical order. 

 SELECT MOVIE.Title, REVIEWER.Reviewer_Name, RATING.Stars
FROM MOVIE INNER JOIN RATING ON RATING.Movie_ID = MOVIE.Movie_ID
INNER JOIN REVIEWER ON REVIEWER.Reviewer_ID = RATING.Reviewer_ID
ORDER BY MOVIE.Title ASC;                    // to get ordered attribute we use order by



COUNT , GROUP BY , ORDER BY 

COUNT    = COUNT function is used to count the number of rows returned by a query that
           matches certain criteria.

GROUP BY = GROUP BY clause is used to group rows that have the same values into summary  
           rows

ORDER BY = ORDER BY clause is used to sort the result set in ascending or descending 
           order.

DISTINCT = DISTINCT keyword is used to remove duplicate rows from the result set of
           a query. It ensures that the returned results are unique for the specified 
           columns.


EX: 

SELECT COUNT(*) FROM users;     //  counts all rows in the users table, giving you the total number of users

SELECT country, COUNT(*) AS num_customers
FROM customers                  // this first group column in to several unique rows then it counts the customers in each country and show it in new  column 
GROUP BY country;

SELECT customer_id, customer_name
FROM customers                    //This query retrieves customer_id and customer_name from the customers table, sorted in ascending order by customer_name.
ORDER BY customer_name ASC;




__Union operator--

to appl union, intersection , set difference operators first we create the seprate querys for two tables and then we apply union or intersection to those two queries

Select all the movie director names and reviewer names into one column. Do not include 
null values.
18. SELECT Director
FROM MOVIE WHERE Director IS NOT NULL
UNION
SELECT Reviewer_Name AS names
FROM REVIEWER WHERE Reviewer_Name IS NOT NULL;


look at how to write query when there is not condition 
EX: Find all the names (first name + last name) of employees in the database who do not
work in the Human Resources department. Assume that all the people work for exactly
one department


Nested Query (sub query)

- A nested query, is a query within another SQL query. 
- The subquery is executed first, and its result is used by the outer query. 
- Nested queries are often used to perform operations that require multiple steps or to break down complex queries into simpler, more manageable parts.
- different types of subqueries are corelated and non corelated subqueries 

EX : lab 6
Write a nested query to list the movie ids where each movie has some rating less than to any of the ratings received by the movie which has a movie id equal to 103.
 SELECT Movie_ID FROM RATING WHERE Stars < ANY (SELECT Stars FROM RATING WHERE Movie_ID = 103);

list the movie ids where each movie has some rating  not equal to any of the ratings received by the movie which has a movie id equal to 
103. (1 mark).
SELECT Movie_ID FROM RATING WHERE Stars != ANY (SELECT Stars FROM RATING WHERE Movie_ID = 103);

Write a nested query to list the reviewer ids who has the same (movie id, stars) combination 
on some movie which has a rating date equal to 2011-01-12
4.SELECT Reviewer_ID FROM RATING WHERE (Movie_ID, Stars) IN (SELECT Movie_ID,Stars FROM RATING WHERE Rating_Date = '2011-01-12');            // note that instead of  = mark we us IN 
 
. Write a nested query to list the details of the movies directed by a director, 
a. who is also a reviewer. 
SELECT * FROM Movie WHERE Director IN (SELECT DISTINCT Movie.Director FROM Movie, Reviewer WHERE Movie.Director = Reviewer.Reviewer_Name);       // in here there is cartiesian product 

corelated and non co related query 

Correlated Query
A correlated subquery is a subquery that references columns from the outer query. 
It is evaluated once for each row processed by the outer query. This means the subquery depends on the outer query for its values and typically cannot be executed independently.

Example:
SELECT e1.Name, e1.Salary
FROM Employee e1
WHERE e1.Salary > (SELECT AVG(e2.Salary)
                   FROM Employee e2
                   WHERE e2.DepartmentID = e1.DepartmentID);

Non-Correlated Query
A non-correlated subquery, or simply a subquery, is independent of the outer query.
 It can be executed on its own and does not reference any columns from the outer query. The outer query and the subquery are executed separately, and the result of the subquery is passed to the outer query.

Example:
SELECT Name, Salary
FROM Employee
WHERE Salary > (SELECT AVG(Salary) FROM Employee);


DELETE

- thing in here is when writing a query for delete after delete we dont mention attributes rest is same

EX: 11. Remove all ratings where the movie's year is before 1970 or after 2000.
DELETE FROM RATING JOIN MOVIE ON
MOVIE.Movie_ID = RATING.Movie_ID
WHERE MOVIE.Year< 1970 OR MOVIE.Year > 2000;

12. Remove all ratings where the rating date is NULL.
DELETE FROM RATINGS 
WHERE ratingdate is NULL

difference between delete and truncate staetments ?
delete -  * delete command use to delete a row in a table
          * we can rollback data after delete statement 
          * slower than the truncate statement

truncate -  * truncate use to delete all rows in a table
            * we cant  rollback data
            * faster 


INSERT

in here we use INSERT and INTO to show inserting table.
and we use cartisian product too but not mention in querie 

EX:13.Insert 5-star ratings by James Cameron for all movies in the database. Leave the review date as NULL

INSERT INTO RATING 
SELECT REVIEWER.Reviewer_ID, MOVIE.Movie_ID, 5, NULL
FROM MOVIE, REVIEWER                // cartisain product of two tables 
WHERE REVIEWER.Reviewer_Name="James Cameron";


UPDATE

EX:14. For all movies that have an average rating of 4 stars or higher, add 25 to the release year. (Update the existing tuples. Do not insert new tuples). 

UPDATE MOVIE SET YEAR = YEAR + 25
WHERE Movie_ID IN (SELECT Movie_ID FROM RATING GROUP BY Movie_ID HAVING AVG(Stars)>=4); 




Views, Triggers, Stored Procedures

In a relational database management system (RDBMS), views, triggers, and stored procedures are key components that enhance functionality and maintain the integrity and efficiency of the database. Here's a brief overview of each


Views

- Views allow us to take complex sql queries and store it under a name, its like a variable for a query.
- its actually works as a virtual table 
- Views do not store data themselves but display data stored in other tables. 
- so its not updatable or insertable like real table would be
- we can run that query every time using the view name 

They can be used to:
Simplify complex queries by encapsulating them.
Present a different representation of the data.
Restrict access to specific data, providing a layer of security.

Syntax:
CREATE VIEW view_name AS
SELECT column1, column2, ...        // actually rest is a normal query
FROM table_name
WHERE condition;

ex:
Create the Registered View

CREATE VIEW Registered AS
SELECT 
    s.Name,
    s.Registration_Number,
    s.GPA,
    c.Convocation_Reg_Num,
    c.Address,
    c.Age
FROM Student s
JOIN Convocation c ON s.Registration_Number = c.Student_Reg_Num;

EX : project

1.view to show all currently borrowed books and their borrowers.

 CREATE VIEW active_borrowed_books AS
SELECT users.username, books.title, transactions.borrow_date
FROM users
JOIN transactions ON users.user_id = transactions.user_id
JOIN books ON transactions.book_id = books.book_id
WHERE transactions.return_date IS NULL;

2. view for get user information 

CREATE VIEW user_info AS
SELECT users.user_id, users.username, users.email, COUNT(transactions.transaction_id) AS borrowed_books_count
FROM users
LEFT JOIN transactions ON users.user_id = transactions.user_id
GROUP BY users.user_id;



Stored Procedures

- Stored procedures are sets of SQL statements that can be executed as a program
- Instead of writing the same SQL statements repeatedly, you can call a stored procedure.
- Stored procedures can accept parameters, perform logic operations, and return results. 
They are used to:
Encapsulate complex business logic.
Improve performance by reducing network traffic.
Enhance security by controlling access to data.

Syntax:
CREATE PROCEDURE procedure_name (IN param1 datatype, OUT param2 datatype)
BEGIN
    -- Procedure logic here
END;

ex:
Create a Stored Procedure for Registration

CREATE PROCEDURE RegisterForConvocation(
    IN studentName VARCHAR(100),
    IN lastName VARCHAR(50),
    IN address VARCHAR(100),
    IN age INT
)
BEGIN
    DECLARE newConvocationRegNum INT;
    
    INSERT INTO Convocation (Last_Name, Address, Age, Student_Reg_Num)
    SELECT lastName, address, age, Registration_Number
    FROM Student
    WHERE Name = studentName;
    
    SET newConvocationRegNum = LAST_INSERT_ID();
    
    UPDATE Student
    SET Convocation_Reg_Num = newConvocationRegNum
    WHERE Name = studentName;
END //

EX: project 

1.Create a stored procedure for user registration that handles inserting user details and password hashing.

CREATE PROCEDURE register_user(IN p_username VARCHAR(50), IN p_password VARCHAR(255), IN p_email VARCHAR(100))
BEGIN
    DECLARE hashed_password VARCHAR(255);
    SET hashed_password = SHA2(p_password, 256);
    INSERT INTO users (username, password, email) VALUES (p_username, hashed_password, p_email);
END;


Triggers

- A trigger is a SQL code that automatically executes in response to certain events on a particular table or view. 
- Used to maintain integrity of the data 
- Triggers can be set to fire before or after INSERT, UPDATE, or DELETE operations.

Triggers are often used for:
Automatically updating related tables.
Auditing changes in the database.
EX: to send the customer a welcome email after he logged in to the system 

Syntax:
CREATE TRIGGER trigger_name
(BEFORE / AFTER ) ( INSERT / UPDATE / DELETE ) ON table_name
( FOR EACH ROW / FOR EACH COLUMN )
BEGIN
    (-- Trigger logic here )
END

EX:
Write a Trigger for LateRegistration

CREATE TRIGGER AfterLateRegistration
AFTER INSERT ON LateRegistration
FOR EACH ROW
BEGIN
    UPDATE Student
    SET Convocation_Reg_Num = NEW.Convocation_Reg_Num
    WHERE Registration_Number = NEW.Student_Reg_Num;
END //

EX: Project
1. trigger to update the availability of a book when it is borrowed or returned.

CREATE TRIGGER after_transaction_update
AFTER UPDATE ON transactions
FOR EACH ROW
BEGIN
    IF NEW.return_date IS NOT NULL THEN
        UPDATE books SET available = 1 WHERE book_id = NEW.book_id;
    ELSE
        UPDATE books SET available = 0 WHERE book_id = NEW.book_id;
    END IF;
END;

AFTER Triggers

AFTER triggers are executed after the specified DML event (INSERT, UPDATE, DELETE) has occurred.
These triggers are commonly used to perform actions like logging changes, enforcing complex business rules, or updating related tables.

BEFORE Triggers

BEFORE triggers are executed before the specified DML event occurs. They are used to validate data or perform other actions before the data modification takes place. Note that SQL Server does not support BEFORE triggers directly; instead, you can use INSTEAD OF triggers to achieve similar functionality.




Indexing

- indexing is a technique used to improve the performance of database queries
- An index allows the database to find and retrieve specific rows much faster than it could 
  by scanning the entire table.
- Its like a book's index that allows you to quickly find the page containing the   
  information you need without reading through the entire book
- if we didn't use index then its go through all the rows thats why when large data set its
  going to be slow 


When to Enable Indexing?
- Huge data tables that information are regularly accessed

Benefits of Indexing

-Faster Query Performance: reduces the time taken to retrieve data.
-Efficient Data Access: Especially useful for large tables with millions of rows.

When should indexes be avoided?
★ Indexes should not be used on small tables.
★ Tables that have frequent, large batch updates ,deletions or insert operations because then query execution time will be high.
★ Indexes should not be used on columns that have high number of NULL values.
★ Columns that are frequently manipulated should not be indexed.

Drawbacks of Indexing

-Index need some storage space
-INSERT, UPDATE, and DELETE operations can be slower because indexes need to be updated.

what do we consider when selecting a column or two as a index?

-Columns with a high number of unique values (high cardinality) are generally better candidates for indexing because they are more selective.

- Columns that are frequently used in WHERE clauses are good candidates for indexing 
SELECT * FROM orders WHERE customer_id = 123;

-  Columns that are commonly used in join conditions
SELECT * FROM orders o JOIN customers c ON o.customer_id = c.customer_id;

-Columns that are often used in ORDER BY and GROUP BY clauses
SELECT * FROM orders ORDER BY order_date;

- Indexing columns used in SELECT DISTINCT can improve performance.
SELECT DISTINCT customer_id FROM orders;


Types of Indexes:

Primary Index    : Automatically created when a primary key is defined. Ensures that each value in the key column(s) is unique and indexed.
Unique Index     : Ensures all values in the indexed column(s) are unique.
Non-Unique Index : Allows duplicate values in the indexed column(s). Used for speeding up queries on non-key columns.
Composite Index  : Involves multiple columns. Useful for queries that filter on multiple columns.

so we can create index columns (when creating tables or aftrer creating tables) , view the indexes of tables ,remove indexes , use indexed collumns on queries.

EX: 
Basic index creation:
CREATE INDEX index_name ON table_name (column_name);

Composite index creation:
CREATE INDEX index_name ON table_name (column1, column2);

Unique index creation:
CREATE UNIQUE INDEX index_name ON table_name (column_name);

- if we create a index using a column,  when that column use in a query index automatically apply to it to and it fasten the process





Query Optimization

EXPLAIN

When a SELECT query does not perform well as you think it should, use the EXPLAIN 
statement to ask the MySQL server for information about how the query optimizer 
processes the query







 Transaction Processing


- Transaction processing is like  execution of a sequence of SQL statements that are treated as a single unit.
- If any operation within the transaction fails, the entire transaction will fail

Properties of Transactions (ACID properties)

1. Atomicity – All or nothing
2. Consistency – No constraints violated.
3. Isolation – Independence.
4. Durability – Once committed, it is permanent.

SQL Transaction Commands:

BEGIN TRANSACTION: Begins a new transaction.
COMMIT           : Commits the current transaction, making all its changes permanent.
ROLLBAK          : Rolls back the current transaction, undoing all changes made since the 
                   transaction began.

EX:
-- Start a new transaction
BEGIN TRANSACTION;

-- Execute a series of SQL statements
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

-- Commit the transaction
COMMIT;

Importance of Transaction Processing in SQL:

Data Integrity: Ensures that the database remains accurate and reliable.
Consistency   : Maintains database rules and constraints.
Recovery      : Helps in recovering the database to a stable state in case of a failure.
Concurrency Control: Manages simultaneous operations without conflicting.
















