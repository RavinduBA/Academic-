https://docs.google.com/document/d/1TPH5Fjj1Iux9E16hDmjv1HIDidOg7gl89HMsYO7EFiw/edit

https://www.youtube.com/watch?v=b8pAPWsWIE4

What is React and what problem does it solve?
React is a JavaScript library for building user interfaces. It provides a component-based architecture.
React's virtual DOM enables faster rendering by minimizing actual DOM manipulations.

How does React differ from other JavaScript frameworks?
Unlike traditional frameworks like Angular, React is focused solely on the view layer of the application. It provides a component-based architecture, allowing developers to build encapsulated UI components that manage their state. React also utilizes a virtual DOM for performance optimization, which sets it apart from frameworks like jQuery.

What is JSX in React?
JSX allows developers to write HTML-like code within JavaScript. It provides a more readable and concise way to define the structure of UI components in React. JSX gets compiled to regular JavaScript by tools like Babel before being executed in the browser.

How do you create a component in React?
In React, components can be created as either functional components or class components. Functional components are simple JavaScript functions that return JSX elements, while class components are ES6 classes that extend React. Components should implement a render method to return JSX.

What is the state in React?
State in React represents the data a component needs to render and respond to user interactions. It is managed internally by the component and can be updated using the setState() method. When state changes, React automatically re-renders the component to reflect the new state.

Virtual DOM and Real DOM

Real DOM is the browser’s representation of a web page’s HTML structure.
When a user interacts with a web page, such as clicking a button or filling out a form, the browser updates the Real DOM to reflect the changes. The browser then re-renders the page to display the updated HTML.
Virtual DOM is an abstraction of the Real DOM, created and maintained by React.
The Virtual DOM is a lightweight copy of the Real DOM, which allows for faster updates and improved performance. When a user interacts with a web page, React 

What are props in React?
The props in React are the inputs to a component of React
They can be single-valued or objects having a set of values that will be passed to components of React during creation by using a naming convention that almost looks similar to HTML-tag attributes. We can say that props are the data passed from a parent component into a child component.

What is prop drilling in React?
Sometimes while developing React applications, we need to pass data from a component that is higher in the hierarchy to a component that is deeply nested. To pass data between such components, we pass props from a source component and keep passing the prop to the next component in the hierarchy till we reach the deeply nested component.

What is React Hooks?
React Hooks are the built-in functions that permit developers to use the state and lifecycle methods within React components. Each lifecycle of a component is having 3 phases which include mount, unmount, and update. Along with that, components have properties and states. Hooks will allow using these methods by developers to improve the reuse of code with higher flexibility in navigating the component tree.
Using Hook, all features of React can be used without writing class components. For example, before React version 16.8, it required a class component for managing the state of a component. But now using the useState hook, we can keep the state in a functional component.

What is  React Router?
React Router is a powerful routing library built on top of React, which helps in adding new screens and flows to the application. This keeps the URL in sync with the data that’s being displayed on the web page. It maintains a standardized structure and behavior and is used for developing single-page web applications. React Router has a simple API.

what is server side and client side rendering and what does the react ?


1) Files

package.json =  contains dependencies , scripts of  react app
.gitignore   =   files/folders that we dont want to add when uploading to github
node_modules =  if this folder dosent exisit in reactapp (mostly when we create with vite)  type npm install

JSX  (JavaScript XML)

JSX allows developers to write HTML-like code within JavaScript.
making it easier to create and visualize the structure of your components

Features of JSX

1.HTML-like Syntax:
JSX looks similar to HTML, but we can write JavaScript expressions within it.
we can use  JavaScript expression within JSX using curly braces {}.
this can be used to interact with arrays ,functions, varibles , objects many things.....
EX: {user.name}, 
    {items.length > 0 ? 'Items present' : 'No items'},
    <p> {arr[1], arr[2]} </p>
    {obj.age}
    
3.Attributes and Properties:
JSX allows you to pass attributes to elements similar to HTML.
(e.g., className instead of class).

4.Components:
You can create custom React components and use them within JSX.
Components must start with an uppercase letter.


2) Event handling

Common Events

Mouse events: onClick, onDoubleClick, onMouseEnter, onMouseLeave, etc.
Form events: onChange, onSubmit, etc.
Keyboard events: onKeyDown, onKeyPress, onKeyUp, etc.
Focus events: onFocus, onBlur, etc.

EX:

function func1(){                  //normal function
  console.log("hello1");
}

const func2 = () =>{               // Arrow function without parameters
  console.log("hello2");
}

const func3 = (name) =>{           // since this function has a parameter it cant be called directly in Onclick event
  console.log("hello3"+ name);     // so we have to use anonymous function to call this function
}

const func4 = (e) =>{             // Event Object
  console.log("hello4",);         // so by this it returns a object, this can be any word
}

const func5= (name,e) =>{
  console.log("hello3"+ name , e );
}

  return (
      <div>
             <button onClick={func1}> Click me 1</button>
             <button onClick={func2}> Click me 2</button>
             <button onClick={() => func3("ravindu")}> Click me</button>         // using anonymous function because it have parameters 
             <button onClick={func4}> Click me 4</button>
             <button onClick={(e) => func5("ravindu",e)}>Click me 5</button>
      </div>
  )

Event Object (e)

- Event object is automatically passed to event handler functions.
- This object contains information about the event that occurred, such as the type of event, the target element, and other relevant data.

e.type: The type of the event (e.g., 'click').
e.target: The element that triggered the event.
e.value: The current value of an input, select, or text area element.



3) React Router
React Router is a powerful routing library of React, which helps in adding new screens and flows to the application. 
This keeps the URL in sync with the data that’s being displayed on the web page. It maintains a standardized structure and behavior and is used for developing single-page web applications. React Router has a simple API

# What the difference between react router and normal anchor tags in html?
we can use anchor tags in react to routing but it refreshes the page but React router Updates the browser's URL without a full page refresh.

for more refer Guide.txt


4) useState

- useState is a hook that allows you to add state to functional components. It enables your component to change values between renders.
- we use useState when we need to store and update values that can change over time, like form inputs, toggles, counters, and any dynamic data.

EX:   const [ _____1___ , ___2____] = React.useState("____","________")

        1 = this is the variable
        2 = this is the function like a thing that changes the variable / or simply a new state value
 
-In a function 2nd component must be edited and inside the return 1st component must be implemented. states can be changed by using a button or element with onClick={_____}

EX :    const [count, setCount] = React.useState(0)
    function add() {
        setCount(count + 1)
    }
    function subtract() {
        setCount(count - 1)
    }

EX:  to input a value and add that value to another part of the page
     
const App = () => {
  const [inputValue, setInputValue] = useState('');
  const [displayValue, setDisplayValue] = useState('');

  const handleChange = (e) => {
    setInputValue(e.target.value);
  };

  const handleClick = () => {
    setDisplayValue(inputValue);
  };

  return (
    <div>
      <input type="text" onChange={handleChange} value={inputValue} />
      <button onClick={handleClick}>Click</button>
      <p>{displayValue}</p>
    </div>
  );
};

EX :  export default function App() {

    const [contact, setContact] = React.useState({
        firstName: "John",
        lastName: "Doe",
        phone: "+1 (719) 555-1212",
        email: "itsmyrealname@example.com",
        isFavorite: false
    })
   
    let starIcon = contact.isFavorite ? "star.jpeg" : "starF.jpg"
    

    function toggleFavorite() {
        setContact(prevContact => ({
            ...prevContact,            /// to keep the rest of the elemnts in components
            isFavorite: !prevContact.isFavorite

        }))
    }
       

useEffect

- useEffect hook allows you to perform side effects in our functional components
- Side effects can include data fetching, subscriptions, manual DOM manipulations, and more.
- we use useEffect when you need to run code that interacts with the outside world or affects state outside the scope of the component rendering, such as making API calls, setting up event listeners, or updating the document title.

Key Concepts:
Basic Usage   : useEffect runs after every render by default.(if State is change in any thing ,useffect runs (we control this by dependencies)

Dependencies  : - You can control when useEffect runs by specifying dependencies.
                - you can add things so it runs only if that things state is changed.
                - If you pass a second argument, an array of dependencies, useEffect will only run the effect if one of the dependencies has changed since the last render.
                - If you provide an empty array ([]), the effect runs only once after the initial render.
                - If you didn't add anything for dependencies then thing inside the useeffect runs every time when something renders in page(any button or anything)
                 
// Cleanup    :  If your effect creates resources that need to be cleaned up (e.g., subscriptions, timers), useEffect can return a cleanup function.


EX :
 const [count, setCount] = useState(0);

  useEffect(() => {
    
    document.title = `You clicked ${count} times`;    // Update the document title using the browser API

    return () => {                                    // Optional cleanup function
      console.log('Cleanup function executed');
    };
  }, [count]);              // Only re-run the effect if count changes

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );


EX: Fetching Data: if we didnt use Useeffect then this will continuosly run so it may reduce the performance of our application 

useEffect(() => {
  async function fetchData() {
    const response = await fetch('https://api.example.com/data');
    const result = await response.json();
                            // Update state with the result
  }
  fetchData();
}, []);                     // Empty array ensures it runs only once           

Key Differences

useState is used to create and manage local state in a component.
useEffect is used to perform side effects in a component.

useState runs whenever the state function (setState) is called.
useEffect runs after the component renders. You can control when it runs by specifying dependencies.

useState does not depend on other variables; it only manages a single piece of state.
useEffect can depend on variables; it runs when its dependency array changes.

Side Effects:
useState does not deal with side effects. It is purely for state management within the component.
useEffect is specifically designed to handle side effects, like data fetching, subscriptions, or manual DOM updates.



Conditional rendering

Using If-Else Statements
Using Logical AND operator (&&)
Using Ternary Operators
Using Switch Case

- theses things can be used to render components ,elements if a condition is TRUE
EX: when showing a product list using fetch API ,but if there is no product in category we can use this to show there is no products 

Logical AND Operator (&&)

EX:
function App() {

const loggdin = true;
const names = ["ravindu" ,"kasuni"]

  return (
    <>      
                             
    {loggdin  &&  <LoggedIN/> }           // if the variable before the && is true component after && will render
    {!loggdin && <h2>Logged out</h2>}     
     
    {names.length >0 && names.map((name) =>{ return <h2>{name}</h2> })}
    {names.length == 0 && <h2>no names</h2>}
     
    </>
  )

Using Ternary Operators

{ condition ? (thing to do if condition TRUE) : (Else statement(if FALSE)) }

EX:
const names = ["ravindu" ,"kasuni"]

 return (
    <>
      {names.length > 0 ? (names.map((name) =>{return <h2>{name}</h2> })) : 
      (<h2> no names</h2>) }
    </>
  )



Rest vs Spread Operator 

- rest and spread operators are both represented by three dots (...). 

Rest Operator (collect rest of the things)

-The rest operator is used in function parameters to handle an indefinite number of parameters.
- it take list of items (parameters) and store in a array

EX: 
function App() {

function sum(...somenumbers){

let total =0 ;
somenumbers.forEach(somenumber=>{            //  since numbers passed as array
total += somenumber;
})
return total;
}
console.log(sum(1,2,3,4,5,6,7,8,9,10));

function mybio(name,channel,...rest){   // here also word passed as seprate array
  console.log(name ,channel,rest);
}
mybio("ravindu","ravi", "a","b","c","d",) 

  return (
    <>
    </>
  )


Spread Operator 

- spread operator sets array to a list of items
- The spread operator is used to expand elements of an iterable (like an array or string) or properties of an object into a new array, object, or function arguments.

EX:
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = [...arr1, ...arr2];
console.log(combined); // [1, 2, 3, 4, 5, 6]

EX: Practical EX when using Porps :

-Using the spread operator to pass all props at once 

function Card(props) {
  return (
    <div className="card">
      <h1>{props.title}</h1>
      <p>{props.content}</p>
      <p>Author: {props.author}</p>
      <p>Date: {props.date}</p>
    </div>
  );
}

function App() {
  const cardProps = {
    title: "Hello, World!",
    content: "This is a simple card component.",
    author: "John Doe",
    date: "2024-06-28",
    bgColor: "#f0f0f0",
    textColor: "#333"
  };

  return (
    <div>
      <Card key={product.id} {...cardProps} />    //Using the spread operator to pass all props at once 
    </div>
  );
}




useRef Hook

- useRef is a hook in React that provides a way to persist values between renders without causing a re-render when the value changes. 
- It's used for accessing and interacting with DOM elements directly.
- first we have to decralre a const as useRef , then we must apply it 

EX: 
const [input,setinput] = useState("Input text goes here");
const [count,setcount] = useState(0);


const handlechange= (e) =>{
 if(e.target.value.length == 0){
    setinput("Input text goes here")
 }
 else{
  setinput(e.target.value)
}
}

const countref = useRef(0);

useEffect(() => {
  //setcount(  count + 1)
  countref.current = countref.current + 1;
})

  return (
    <>
 <input type='text' onChange={handlechange} />
   <p>You have input : {input}</p>
   <p>Rendered {countref.current}</p> 
    </>
  )


Accessing DOM Elements

-useRef is often used to get a reference to a DOM element and performoperations like focusing, measuring, or manipulating it.
- first we have to decralre a const as useRef
Common Types of DOM Elements  :   <div> ,<h1>,<form>,<input>,<input>,<ul>,<table>,<img>

EX:

const countref = useRef(0);
const inputref = useRef();
const inputref1 = useRef();
const inputref2 = useRef(); 


useEffect(() => {

 inputref.current.style.background = "red";
 inputref1.current.style.background = "yellow";
})

const handleClick = () =>{
  if(inputref.current.value ==""){
  inputref2.current.focus()
  }
  else if (inputref2.current.value >50){
  alert("sucess")
  }
  else{
  alert("failed")
  }
}

  return (
    <>
   <input type='text'  ref={inputref1}/>
    <input type='text' ref={inputref}/>
    <br></br>
    <br></br>

    <input type='text' ref={inputref2}  />
    <button onClick={handleClick} > Validate  </button>

    </>
  )

- so in this example it used useref to access and change th ecolours of doms like inputbox
- and then we used useRef to get refernce of the inputbox and do operations according to the input.
- in here it get theinput value if it is lower or less than some value it alert the page , if it dosent contain any value then it focuses the input box




How to Fetch Data from API

Map method

-map method in React is commonly used to render lists of elements from an array.
- this returns elements as a list of array but if we use foreach method we cant do these things by that reason is it dosent return as a new array .
- note that when we mapping items every item must contain a key (id) or it shows a warning
- for example apis use - https://fakestoreapi.com/

{array_name.map((item_name) =>(
....process to do
))}

usually use notation is   array name = users , items
                          item name  = user  , item

EX:Rendering a list of items
function App() {
  const items = ['Apple', 'Banana', 'Cherry'];

  return (
    <ul>
      {items.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  );
}

EX:Rendering a list of objects 
  const users = [
    { 
      id: 1,
      name: 'John Doe',
      age: 28
     },
    { 
      id: 2,
      name: 'Jane Doe', 
      age: 25 
    },
    { id: 3, 
      name: 'Sam Smith', 
      age: 22 
    }];

  return (
    <div>

      {users.map((user) => (
        <div key={user.id}>
          <h2>{user.name}</h2>
          <p>Age: {user.age}</p>
        </div>
      ))}
    </div>
  );

synchronus and asynchronus functions in react

synchronous and asynchronous functions refer to how tasks are executed and managed in terms of timing and concurrency.

Synchronous Functions

-Synchronous functions execute tasks sequentially.
-This means the code runs line-by-line, and a function will not return until it has completed all its work.

asynchronus functions

-Asynchronous functions allow tasks to run in the background, enabling the program to continue run other tasks without waiting for the asynchronous operation to complete.
-In React, asynchronous functions are often used for tasks like data fetching, where you need to get data from an API and then update the component state once the data is available.
-When a function is defined as async in a React component, it allows you to perform asynchronous operations within that function.
 EX: fetching data from an API, 
     waiting for a timeout,
     performing any other task that involves promises. 
-Using async/await within React components we can manage these operations more cleanly and readably compared to using raw promises or callbacks.
(
Promise = A promise represents a value that may be available now, or in the future, or never.
        = Promises are used to handle asynchronous operations, such as fetching data from an API, waiting for a timeout, or performing other tasks that will complete in the future.
        = We can use promise.then((results)=>{}) ,
                     promise.catch((error)=>{}) like methods
)
(
await = The await keyword is used to pause the execution of an async function until a promise is resolved or rejected.
      = This allows you to write asynchronous code in a more synchronous and readable manner. When await is used, the function execution pauses at that point until the promise settles,
        and then it resumes with the resolved value of the promise or throws an error if the promise is rejected.
)

EX:
function App() {
  const [data, setData] = useState(null);

  useEffect(() => {
    async function fetchData() {                        //async function
      const response = await fetch('https://api.example.com/data');
      const result = await response.json();
      setData(result);
    }
    fetchData();
  }, []);                                             // Empty dependency array to run only once
                                                      // we can use event handling for catch error when api calling 
  return (
    <div>
      {data ? <pre>{JSON.stringify(data, null, 2)}</pre> : <p>Loading...</p>}
    </div>
  );
}




prop drilling and UseContext 

- Prop drilling is the process of passing data from a parent component down to nested child components through multiple layers of components.
- This happens when a deeply nested component needs get data or functions that are located in a higher-level component.
- The data or functions must be passed down through all intermediary components, even if they do not need to use that data for themselves.

EX: 

function App() {

  return (                               
    <>
  <Comp1 />
    </>
  )

function Comp1() {

const [username ,setusername]= useState("Guest")

  return (
    <div>
        <h2>parent</h2>                                        // Top-level component
      <p>Welcome {username}</p>
      <input type='text' placeholder='Enter your username' 
      onChange={ (e) =>
      (setusername(e.target.value))  
      }  />

      <Comp2 user={username} />
    </div>

function Comp2(props) {

  return (                                  // Intermediate component
    <div>
      <h2>Child 1</h2>
  <Comp3 user={props.user}/>                // passing the value to child component
    </div>
  )

function Comp4(props) {
  return (                                 // Deeply nested component

    <div>
        <h2>Child 3</h2>
        <p>Welcome {props.user}</p>        //finally using the props
    </div>
  )
}


Use Context hook

- useContext hook i is a powerful alternative to prop drilling.
- So this allows uscto create a context and then access the context value from any component in the component tree
- Its avoid the need to pass props through multiple levels of components.

Steps

1. Use createContext to create a context in parent component.
2. Use the .Provider component to provide the context value (in parent component) to the component tree.
( set this as a cover to varibles that need to pass and inside this we mention the variables that need to pass)
3. Use the useContext hook to consume the context value within a component.(in value needed child component)



EX: 
export const UserApp = createContext();      // creating useContext
                                             // created outside the function so we can import it
function Comp1() {
const [username ,setusername]= useState("Guest")

  return (
    <div>
      <UserApp.Provider value={username} >  // setting .provider and passing varibles

        <h2>parent</h2>
      <p>Welcome {username}</p>
      <input type='text' placeholder='Enter your username' 
      onChange={ (e) =>
      (setusername(e.target.value))  
      }  />
      <Comp2  />
      
      </UserApp.Provider>                   // ends .provider
    </div>
  )

function Comp4() {
const user = useContext(UserApp)   // only calling the Usecontext in needed component
  return (
    <div>
        <h2>Child 3</h2>
        <p> {user}</p>             // using the passed variable
    </div>
  )
}





